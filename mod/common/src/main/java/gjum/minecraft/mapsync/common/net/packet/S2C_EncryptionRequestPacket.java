package gjum.minecraft.mapsync.common.net.packet;

import io.netty.buffer.ByteBuf;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import org.jetbrains.annotations.NotNull;

/**
 * This is sent back to the client after the Handshake.
 *
 * @param publicKey The server's public key.
 * @param verifyToken A transaction ID of four randomly generated bytes.
 */
public record S2C_EncryptionRequestPacket(
		@NotNull PublicKey publicKey,
		byte @NotNull [] verifyToken
) implements IPacket {
	public static final int PACKET_ID = 2;

	public S2C_EncryptionRequestPacket(final @NotNull ByteBuf buffer) {
		this(
				readKey(buffer),
				IPacket.readByteArray(buffer)
		);
	}

	@Override
	public void write(final @NotNull ByteBuf buffer) {
		IPacket.writeByteArray(buffer, this.publicKey.getEncoded());
		IPacket.writeByteArray(buffer, this.verifyToken);
	}

	private static PublicKey readKey(final @NotNull ByteBuf buffer) {
		try {
			final byte[] encodedKey = IPacket.readByteArray(buffer);
			final var keySpec = new X509EncodedKeySpec(encodedKey);
			return KeyFactory.getInstance("RSA").generatePublic(keySpec);
		}
		catch (final Throwable thrown) {
			throw new RuntimeException(thrown);
		}
	}
}
